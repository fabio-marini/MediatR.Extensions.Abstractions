<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Extension Command</Title>
      <Description>Generates the command class required by the extensions</Description>
      <Author>Fabio Marini</Author>
      <SnippetTypes>
        <SnippetType>MediatR Extensions</SnippetType>
      </SnippetTypes>
      <Shortcut>cmd</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>CommandName</ID>
          <ToolTip>The name of the command class without the 'Command' suffix</ToolTip>
          <Default>MyCommand</Default>
        </Literal>
        <Literal Editable="true">
          <ID>OptionsName</ID>
          <ToolTip>The name of the options class without the 'Options' suffix</ToolTip>
          <Default>MyOptions</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
public class $CommandName$Command<TMessage> : ICommand<TMessage>
{
    private readonly IOptions<$OptionsName$Options<TMessage>> opt;
    private readonly PipelineContext ctx;
    private readonly ILogger log;

    public $CommandName$Command(IOptions<$OptionsName$Options<TMessage>> opt, PipelineContext ctx = null, ILogger log = null)
    {
        this.opt = opt;
        this.ctx = ctx;
        this.log = log ?? NullLogger.Instance;
    }

    public virtual Task ExecuteAsync(TMessage message, CancellationToken cancellationToken)
    {
        cancellationToken.ThrowIfCancellationRequested();

        if (opt.Value.IsEnabled == false)
        {
            log.LogDebug("Command {Command} is not enabled, returning", this.GetType().Name);

            return Task.CompletedTask;
        }

        try
        {
            throw new NotImplementedException("TODO!");

            log.LogDebug("Command {Command} completed", this.GetType().Name);
        }
        catch (Exception ex)
        {
            log.LogDebug(ex, "Command {Command} failed with message: {Message}", this.GetType().Name, ex.Message);

            throw new CommandException($$"Command {this.GetType().Name} failed, see inner exception for details", ex);
        }

        return Task.CompletedTask;
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
